apiVersion: v1
data:
  mongo_backup_rotated.sh: |+
      #!/bin/bash

      logFile=./logAndError
      FAILED=false

      ###########################
      ### INITIALISE DEFAULTS ###
      ###########################

      if [ ! $DB_HOST ]; then
        DB_HOST="localhost"
      fi;

      if [ ! $USERNAME ]; then
        USERNAME="root"
      fi;

      if [ ! $DB_PORT ]; then
        DB_PORT="27017"
      fi;

      ###########################
      #### START THE BACKUPS ####
      ###########################

      function perform_backups()
      {
        SUFFIX=$1
        FINAL_BACKUP_DIR=$BACKUP_DIR"`date +\%Y-\%m-\%d_\%H`$SUFFIX/"

        echo "\nBackup directory: $FINAL_BACKUP_DIR" | tee -a $logFile

        if ! mkdir -p $FINAL_BACKUP_DIR; then
          echo "\n\nCannot create backup directory in $FINAL_BACKUP_DIR. Go and fix it!" | tee -a $logFile 1>&2
          exit 1;
        fi;


        ###########################
        ###### FULL BACKUPS #######
        ###########################


        echo -e "\n\nPerforming full backups" | tee -a $logFile
        echo -e "--------------------------------------------\n"

        if [ $ENABLE_GLOBALS_BACKUPS = "yes" ]
        then
              echo "Globals backup"

              set -o pipefail
              if ! mongodump --host $DB_HOST --port $DB_PORT --authenticationDatabase admin --username $USERNAME --password "$PASSWORD" --gzip --out=$FINAL_BACKUP_DIR ; then
                      echo "\n\n[ERROR] Failed to produce globals backup" | tee -a $logFile 1>&2
                FAILED=true
              fi
              set +o pipefail
        else 
          echo "None"
        fi

        if $FAILED
        then
          echo -e "\n\nAll Database backups completed, but one or more backups failed!" | tee -a $logFile 1>&2
          output_json=$(printf '{"title": "%s Backups failed!:(","text":  "%s  <pre>Pod name: %s\nDatabase Host address: %s</pre>"}' ${KUBERNETES_JOB_NAME:-Job} "$(cat /app/logAndError)" $KUBERNETES_POD_NAME $DB_HOST)
          curl -H 'Content-Type: application/json' -d "${output_json}" $FAILED_TEAMS_URL
          exit 1;
        else
          echo -e "\n\nAll database backups completed!" | tee -a $logFile
          output_json=$(printf '{"title": "%s Backups successfully done!:)","text":  "%s  <pre>Pod name: %s\nDatabase Host address: %s</pre>"}' ${KUBERNETES_JOB_NAME:-Job} "$(cat /app/logAndError)" $KUBERNETES_POD_NAME $DB_HOST)
          curl -H 'Content-Type: application/json' -d "${output_json}" $SUCCEEDED_TEAMS_URL
          exit 0;
        fi
      }

      function cleanup() {

        MONTHLY_EXPIRED_DAYS=`expr $((($MONTHS_TO_KEEP * 31) + 1))`
        find $BACKUP_DIR -maxdepth 1 -mtime +$MONTHLY_EXPIRED_DAYS -name "*-monthly" -exec rm -rf '{}' ';'
        WEEKLY_EXPIRED_DAYS=`expr $((($WEEKS_TO_KEEP * 7) + 1))`
        find $BACKUP_DIR -maxdepth 1 -mtime +$WEEKLY_EXPIRED_DAYS -name "*-weekly" -exec rm -rf '{}' ';'
        find $BACKUP_DIR -maxdepth 1 -mtime +$DAYS_TO_KEEP -name "*-daily" -exec rm -rf '{}' ';'

      }

      # MONTHLY BACKUPS
      DAY_OF_MONTH=`date +%d`
      if [ $DAY_OF_MONTH -eq 1 ];
      then
        # Delete all expired directories
        cleanup
        perform_backups "-monthly"
      fi

      # WEEKLY BACKUPS

      DAY_OF_WEEK=`date +%u` #1-7 (Monday-Sunday)

      if [ $DAY_OF_WEEK = $DAY_OF_WEEK_TO_KEEP ];
      then
        # Delete all expired directories
        cleanup
        perform_backups "-weekly"
      fi

      # DAILY BACKUPS

      # Delete all expired directories
      cleanup
      perform_backups "-daily"

  pymongo_backup_rotated.sh: |+
    #!/bin/bash
    function cleanup() {

      MONTHLY_EXPIRED_DAYS=`expr $((($MONTHS_TO_KEEP * 31) + 1))`
      find $BACKUP_DIR -maxdepth 1 -mtime +$MONTHLY_EXPIRED_DAYS -name "*-monthly" -exec rm -rf '{}' ';'
      WEEKLY_EXPIRED_DAYS=`expr $((($WEEKS_TO_KEEP * 7) + 1))`
      find $BACKUP_DIR -maxdepth 1 -mtime +$WEEKLY_EXPIRED_DAYS -name "*-weekly" -exec rm -rf '{}' ';'
      find $BACKUP_DIR -maxdepth 1 -mtime +$DAYS_TO_KEEP -name "*-daily" -exec rm -rf '{}' ';'

    }
    # MONTHLY BACKUPS
    DAY_OF_MONTH=`date +%d`
    if [ $DAY_OF_MONTH -eq 1 ];
    then
      # Delete all expired directories
      cleanup
      python3 mongodump.py -monthly
      exit 0;
    fi
    # WEEKLY BACKUPS
    DAY_OF_WEEK=`date +%u` #1-7 (Monday-Sunday)
    if [ $DAY_OF_WEEK = $DAY_OF_WEEK_TO_KEEP ];
    then
      # Delete all expired directories
      cleanup
      python3 mongodump.py -weekly
      exit 0;
    fi
    # DAILY BACKUPS
    # Delete all expired directories
    cleanup
    python3 mongodump.py -daily

  mongodump.py: |+
    import os
    from datetime import datetime
    import json
    import subprocess
    import pymsteams
    import sys

    class bcolors:
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKCYAN = '\033[96m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'

    host = os.getenv('DB_HOST')
    port = os.getenv('DB_PORT')
    teamsNotif = os.getenv('TEAMS_NOTIFICATION')
    succeededTeamsURL = os.getenv('SUCCEEDED_TEAMS_URL')
    failedTeamsURL = os.getenv('FAILED_TEAMS_URL')
    k8sPodName = os.getenv('KUBERNETES_POD_NAME')
    k8sJobName = os.getenv('KUBERNETES_JOB_NAME')
    base_backup_dir = os.getenv('BACKUP_DIR')
    if not os.path.exists(base_backup_dir):
        os.makedirs(base_backup_dir)

    SUFFIX = sys.argv[1]
    current_time = datetime.now().strftime("%Y-%m-%d_%H")
    backup_dir = os.path.join(base_backup_dir,current_time+SUFFIX)
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)

    with open('/app/creds.json', 'r') as file:
        content = json.loads(file.read())
    SUCCESS=True
    LOG='\n\nMongoDB backup started.   \n'
    for db in content:
        target_file = os.path.join(backup_dir,str(db.get("database_name"))+"-dump.gz.in_progress")
        command = f'mongodump --host {host} --port {port} --authenticationDatabase admin --username {db.get("username")} --password {db.get("password")}  --db {db.get("database_name")} --gzip --numParallelCollections=8 --out={target_file}'
        output = subprocess.run(['bash', '-c', command])
        if output.returncode != 0:
            SUCCESS=False
            LOG += f'   \nSomething went wrong while dumping: {db.get("database_name")}'
            print(bcolors.WARNING +f'Something went wrong while dumping: {db.get("database_name")}'+ bcolors.ENDC , output.stderr)
        else:
            os.rename(target_file, os.path.join(backup_dir,str(db.get("database_name"))+"-dump.gz"))
            print( bcolors.OKGREEN + f'Backup completed: {db.get("database_name")} database.')
            LOG += f'   \nBackup completed: {db.get("database_name")} database.'
    LOG += f'\n\nBackups successfully done!\n\n<pre>Pod name: {k8sPodName}\nDatabase Host Address: {host}</pre>'
    if teamsNotif:
        succeededJobsTeamsMessage = pymsteams.connectorcard(succeededTeamsURL)
        failedJobsTeamsMessage = pymsteams.connectorcard(failedTeamsURL)
    if SUCCESS:
        if teamsNotif:
           succeededJobsTeamsMessage.title(f"{k8sJobName}: Database dumps succeeded!:)")
           succeededJobsTeamsMessage.text(LOG)
           succeededJobsTeamsMessage.send()
        print( bcolors.OKGREEN + f"{k8sJobName}: Dumps succeeded!!!" + bcolors.ENDC)
    else:
        if teamsNotif:
            failedJobsTeamsMessage.title(f"{k8sJobName}: One or more database dumps failed!:(")
            failedJobsTeamsMessage.text(LOG)
            failedJobsTeamsMessage.send()
        print( bcolors.FAIL + f"{k8sJobName}: One or more database dumps failed!!!" + bcolors.ENDC)
        raise (SystemExit)

kind: ConfigMap
metadata:
  name: mongo-backup-files
  namespace: db-backups
